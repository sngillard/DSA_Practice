//Main.java
public class Main {

    public static void main(String[] args) {

        LinkedList myLinkedList = new LinkedList(4);
        
        myLinkedList.printAll();
        

        /*
            EXPECTED OUTPUT:
            ----------------
            Head: 4
            Tail: 4
            Length: 1
            
            Linked List:
            4

        */

    }

}

//LinkedList.java
public class LinkedList {
    
    private Node head;
    private Node tail;
    private int length;
     
    class Node {
        int value;
        Node next;
     
        Node(int value) {
            this.value = value;
        }
    }


public LinkedList(int value) {
    /* Create a new node with the specified value. This node will serve as the first node in our linked list. The 'value' parameter holds the data that the user wants to store in the node. The 'newNode' variable is of type 'Node', which is a nested class inside our LinkedList class, representing the elements of our linked list.*/
    Node newNode = new Node(value); 
 
    /*Set the 'head' of the linked list to point to the newly created node.The 'head' variable is a reference to the first node in the list. Since this is the first and only node at the moment of creation, 'head' points to 'newNode'.*/
    head = newNode; 
 
    /* Set the 'tail' of the linked list to point to the newly created node as well. The 'tail' variable is a reference to the last node in the list. For a new list with a single node, this new node is both the head and the tail, hence 'tail' also points to 'newNode'.*/
    tail = newNode; 
 
    /* Initialize the 'length' of the linked list to 1. The 'length' variable keeps track of the total number of nodes in the list. Since we've just added our first node, the length is set to 1. This helps in quickly knowing the size of our linked list without needing to iterate through it.*/
    length = 1; 
}

    public Node getHead() {
        return head;
    }

    public Node getTail() {
        return tail;
    }

    public int getLength() {
        return length;
    }
    
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.println(temp.value);
            temp = temp.next;
        }
    }
    
    public void printAll() {
        if (length == 0) {
            System.out.println("Head: null");
            System.out.println("Tail: null");
        } else {
            System.out.println("Head: " + head.value);
            System.out.println("Tail: " + tail.value);
        }
        System.out.println("Length:" + length);
        System.out.println("\nLinked List:");
        if (length == 0) {
            System.out.println("empty");
        } else {
            printList();
        }
    }

}
