//Main.java

public class Main {

    public static void main(String[] args) {

        DoublyLinkedList myDLL = new DoublyLinkedList(1);
        myDLL.append(2);

        // (2) Items - Returns 2 Node
        System.out.println(myDLL.removeLast().value);
        // (1) Item - Returns 1 Node
        System.out.println(myDLL.removeLast().value);
        // (0) Items - Returns null
        System.out.println(myDLL.removeLast());
        
        
    	/*
        	EXPECTED OUTPUT:
        	----------------
        	2
        	1
        	null

     	*/

    }

}

//DoublyLinkedList.java

public class DoublyLinkedList {

    private Node head;
    private Node tail;
    private int length;

    class Node {
        int value;
        Node next;
        Node prev;

        Node(int value) {
            this.value = value;
        }
    }

    public DoublyLinkedList(int value) {
        Node newNode = new Node(value);
        head = newNode;
        tail = newNode;
        length = 1;
    }

    public Node getHead() {
        return head;
    }

    public Node getTail() {
        return tail;
    }

    public int getLength() {
        return length;
    }

    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.println(temp.value);
            temp = temp.next;
        }
    }

    public void printAll() {
        if (length == 0) {
            System.out.println("Head: null");
            System.out.println("Tail: null");
        } else {
            System.out.println("Head: " + head.value);
            System.out.println("Tail: " + tail.value);
        }
        System.out.println("Length:" + length);
        System.out.println("\nDoubly Linked List:");
        if (length == 0) {
            System.out.println("empty");
        } else {
            printList();
        }
    }
    
    public void makeEmpty() {
        head = null;
        tail = null;
        length = 0;
    }

    public void append (int value) {
        Node newNode = new Node(value);
        if(length == 0) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
        length++;
    }

	public Node removeLast() {
// If the list is empty, return null.
	    if(length == 0) return null;
// Create a new node `temp` to hold the value of the last node.
	    Node temp = tail;
// If the list contains only one node, set both `head` and `tail` to null.
	    if (length == 1) {
	        head = null;
	        tail = null;
	    } else {
// Otherwise, update the `tail` and `prev` fields of the second-to-last node
// and the `next` and `prev` fields of the last node.
// Set the `tail` to the previous node of the current tail.
	        tail = tail.prev;
// Set the `next` field of the new tail to `null`.	        
	        tail.next = null;
// Set the `prev` field of `temp` to `null`.	        
	        temp.prev = null;
	    }
// Decrement the `length` by 1 to indicate that the list has one less node.	    
	    length--;
// Return the `temp` node, which holds the value of the removed last node.	    
	    return temp;
	}

}
