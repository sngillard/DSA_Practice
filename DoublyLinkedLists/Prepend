//Main.java

public class Main {

    public static void main(String[] args) {

        DoublyLinkedList myDLL = new DoublyLinkedList(2);
        myDLL.append(3);

        System.out.println("Before prepend():");
        System.out.println("-----------------");
        myDLL.printAll();

        myDLL.prepend(1);

        System.out.println("\n\nAfter prepend():");
        System.out.println("----------------");
        myDLL.printAll();
        
        
        /*
            EXPECTED OUTPUT:
    
            Before prepend():
            -----------------
            Head: 2
            Tail: 3
            Length: 2
    
            Doubly Linked List:
            2
            3
    
    
            After prepend():
            ----------------
            Head: 1
            Tail: 3
            Length: 3
    
            Doubly Linked List:
            1
            2
            3

        */
        
    }
    
}

//DoublyLinkedList.java

public class DoublyLinkedList {

    private Node head;
    private Node tail;
    private int length;

    class Node {
        int value;
        Node next;
        Node prev;

        Node(int value) {
            this.value = value;
        }
    }

    public DoublyLinkedList(int value) {
        Node newNode = new Node(value);
        head = newNode;
        tail = newNode;
        length = 1;
    }

    public Node getHead() {
        return head;
    }

    public Node getTail() {
        return tail;
    }

    public int getLength() {
        return length;
    }

    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.println(temp.value);
            temp = temp.next;
        }
    }

    public void printAll() {
        if (length == 0) {
            System.out.println("Head: null");
            System.out.println("Tail: null");
        } else {
            System.out.println("Head: " + head.value);
            System.out.println("Tail: " + tail.value);
        }
        System.out.println("Length:" + length);
        System.out.println("\nDoubly Linked List:");
        if (length == 0) {
            System.out.println("empty");
        } else {
            printList();
        }
    }
    
    public void makeEmpty() {
        head = null;
        tail = null;
        length = 0;
    }

    public void append (int value) {
        Node newNode = new Node(value);
        if(length == 0) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
        length++;
    }

    public Node removeLast() {
        if(length == 0) return null;
        Node temp = tail;
        if (length == 1) {
            head = null;
            tail = null;
        } else {
            tail = tail.prev;
            tail.next = null;
            temp.prev = null;
        }
        length--;
        return temp;
    }

	public void prepend(int value) {
// Create a new node with the given value.	    
	    Node newNode = new Node(value);
// If the list is empty, set both head and tail to the new node.
	    if(length == 0) {
	        head = newNode;
	        tail = newNode;
// If the list is not empty, insert the new node at the head of the list.	        
	    } else {
// Set the next field of the new node to point to the current head.	        
	        newNode.next = head;
// Set the prev field of the current head to point to the new node.	        
	        head.prev = newNode;
// Set the head of the list to be the new node.	        
	        head = newNode;
	    }
// Increment the length of the list.	    
	    length++;
	}

}
